from zinc.zinc_gta3 import GTA3_ZINC, GTA3_ZINC_Dataset, GTA3_ZINC_Batched
import json
import argparse
import os.path as osp
import torch
import lightning as pl
def main():
    #Parse args
    parser = argparse.ArgumentParser(description='Main program to train and evaluate models based on the ZINC dataset.')
    parser.add_argument('config', type=str,
                        help="Path to the config file to be used.")
    parser.add_argument('--force_reload', action="store_true",
                        help="Will force the dataloader to reload the raw data and preprocess it instead of using cached data.")
    args = parser.parse_args()

    # load the config
    if not osp.exists(args.config):
        print(f"Invalid config file! The file {args.config} does not exist.")
        exit()
    config = None
    with open(args.config) as config_file:
        config = json.load(config_file)
    config['model_params']['num_types'] = 11

    #Test old model
    pl.seed_everything(0)
    model = GTA3_ZINC(config['model_params'], config['train_params'])
    xs, As = test_samples()
    print("===Old_model output:===")
    for x,A in zip(xs,As):
        model.forward_step(x,A)

    # Make data suitable for batching
    lengths = torch.tensor([len(x) for x in xs])
    max_l = torch.max(lengths)
    print(max_l)
    #Add own embedding idx
    x_batch = torch.stack([torch.cat([x,torch.ones(max_l-len(x))*10]) for x in xs]).type(torch.int)
    A_batch = torch.zeros((len(As),max_l,max_l))
    for i,A in enumerate(As):
        A_batch[i,:A.shape[0],:A.shape[1]] = A

    #Test new model
    pl.seed_everything(0)
    model = GTA3_ZINC_Batched(config['model_params'], config['train_params'])
    print("===New_model output:===")
    model.forward_step(x_batch,A_batch, lengths)
    

def test_samples():
    x1 = torch.tensor([0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 2, 5, 1, 1, 0, 0, 2, 0, 0,
        0, 0, 0, 0, 0])
    A1 = torch.tensor([[ 1,  1,  2,  3,  4,  5,  6,  7,  6,  7,  5,  6,  7,  8,  9, 10, 11, 12,
         12, 12, 13, 14, 15, 14, 13,  9,  8,  4,  3],
        [ 1,  1,  1,  2,  3,  4,  5,  6,  5,  6,  4,  5,  6,  7,  8,  9, 10, 11,
         11, 11, 12, 13, 14, 13, 12,  8,  7,  3,  2],
        [ 2,  1,  1,  1,  2,  3,  4,  5,  4,  5,  3,  4,  5,  6,  7,  8,  9, 10,
         10, 10, 11, 12, 13, 12, 11,  7,  6,  2,  1],
        [ 3,  2,  1,  1,  1,  2,  3,  4,  5,  6,  4,  5,  6,  7,  8,  9, 10, 11,
         11, 11, 12, 13, 14, 13, 12,  8,  7,  3,  2],
        [ 4,  3,  2,  1,  1,  1,  2,  3,  4,  5,  3,  4,  5,  6,  7,  8,  9, 10,
         10, 10, 11, 12, 13, 12, 11,  7,  6,  2,  3],
        [ 5,  4,  3,  2,  1,  1,  1,  2,  3,  4,  2,  3,  4,  5,  6,  7,  8,  9,
          9,  9, 10, 11, 12, 11, 10,  6,  5,  1,  2],
        [ 6,  5,  4,  3,  2,  1,  1,  1,  2,  3,  3,  4,  5,  6,  7,  8,  9, 10,
         10, 10, 11, 12, 13, 12, 11,  7,  6,  2,  3],
        [ 7,  6,  5,  4,  3,  2,  1,  1,  1,  2,  2,  3,  4,  5,  6,  7,  8,  9,
          9,  9, 10, 11, 12, 11, 10,  6,  5,  3,  4],
        [ 6,  5,  4,  5,  4,  3,  2,  1,  1,  1,  1,  2,  3,  4,  5,  6,  7,  8,
          8,  8,  9, 10, 11, 10,  9,  5,  4,  2,  3],
        [ 7,  6,  5,  6,  5,  4,  3,  2,  1,  1,  2,  3,  4,  5,  6,  7,  8,  9,
          9,  9, 10, 11, 12, 11, 10,  6,  5,  3,  4],
        [ 5,  4,  3,  4,  3,  2,  3,  2,  1,  2,  1,  1,  2,  3,  4,  5,  6,  7,
          7,  7,  8,  9, 10,  9,  8,  4,  3,  1,  2],
        [ 6,  5,  4,  5,  4,  3,  4,  3,  2,  3,  1,  1,  1,  2,  3,  4,  5,  6,
          6,  6,  7,  8,  9,  8,  7,  3,  2,  2,  3],
        [ 7,  6,  5,  6,  5,  4,  5,  4,  3,  4,  2,  1,  1,  1,  2,  3,  4,  5,
          5,  5,  6,  7,  8,  7,  6,  2,  1,  3,  4],
        [ 8,  7,  6,  7,  6,  5,  6,  5,  4,  5,  3,  2,  1,  1,  1,  2,  3,  4,
          4,  4,  5,  6,  7,  6,  5,  3,  2,  4,  5],
        [ 9,  8,  7,  8,  7,  6,  7,  6,  5,  6,  4,  3,  2,  1,  1,  1,  2,  3,
          3,  3,  4,  5,  6,  5,  4,  2,  3,  5,  6],
        [10,  9,  8,  9,  8,  7,  8,  7,  6,  7,  5,  4,  3,  2,  1,  1,  1,  2,
          2,  2,  3,  4,  5,  4,  3,  1,  2,  6,  7],
        [11, 10,  9, 10,  9,  8,  9,  8,  7,  8,  6,  5,  4,  3,  2,  1,  1,  1,
          1,  1,  2,  3,  4,  3,  2,  2,  3,  7,  8],
        [12, 11, 10, 11, 10,  9, 10,  9,  8,  9,  7,  6,  5,  4,  3,  2,  1,  1,
          2,  2,  3,  4,  5,  4,  3,  3,  4,  8,  9],
        [12, 11, 10, 11, 10,  9, 10,  9,  8,  9,  7,  6,  5,  4,  3,  2,  1,  2,
          1,  2,  3,  4,  5,  4,  3,  3,  4,  8,  9],
        [12, 11, 10, 11, 10,  9, 10,  9,  8,  9,  7,  6,  5,  4,  3,  2,  1,  2,
          2,  1,  1,  2,  3,  2,  1,  3,  4,  8,  9],
        [13, 12, 11, 12, 11, 10, 11, 10,  9, 10,  8,  7,  6,  5,  4,  3,  2,  3,
          3,  1,  1,  1,  2,  2,  2,  4,  5,  9, 10],
        [14, 13, 12, 13, 12, 11, 12, 11, 10, 11,  9,  8,  7,  6,  5,  4,  3,  4,
          4,  2,  1,  1,  1,  1,  2,  5,  6, 10, 11],
        [15, 14, 13, 14, 13, 12, 13, 12, 11, 12, 10,  9,  8,  7,  6,  5,  4,  5,
          5,  3,  2,  1,  1,  2,  3,  6,  7, 11, 12],
        [14, 13, 12, 13, 12, 11, 12, 11, 10, 11,  9,  8,  7,  6,  5,  4,  3,  4,
          4,  2,  2,  1,  2,  1,  1,  5,  6, 10, 11],
        [13, 12, 11, 12, 11, 10, 11, 10,  9, 10,  8,  7,  6,  5,  4,  3,  2,  3,
          3,  1,  2,  2,  3,  1,  1,  4,  5,  9, 10],
        [ 9,  8,  7,  8,  7,  6,  7,  6,  5,  6,  4,  3,  2,  3,  2,  1,  2,  3,
          3,  3,  4,  5,  6,  5,  4,  1,  1,  5,  6],
        [ 8,  7,  6,  7,  6,  5,  6,  5,  4,  5,  3,  2,  1,  2,  3,  2,  3,  4,
          4,  4,  5,  6,  7,  6,  5,  1,  1,  4,  5],
        [ 4,  3,  2,  3,  2,  1,  2,  3,  2,  3,  1,  2,  3,  4,  5,  6,  7,  8,
          8,  8,  9, 10, 11, 10,  9,  5,  4,  1,  1],
        [ 3,  2,  1,  2,  3,  2,  3,  4,  3,  4,  2,  3,  4,  5,  6,  7,  8,  9,
          9,  9, 10, 11, 12, 11, 10,  6,  5,  1,  1]])
    
    x2 = torch.tensor([0, 0, 0, 8, 0, 0, 2, 0, 1, 2, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0,
        0, 0])
    A2 = torch.tensor([[ 1,  1,  2,  2,  3,  4,  5,  6,  7,  7,  8,  9, 10, 11, 12, 12, 13, 14,
         15, 14, 13,  9,  8,  3,  4,  4],
        [ 1,  1,  1,  1,  2,  3,  4,  5,  6,  6,  7,  8,  9, 10, 11, 11, 12, 13,
         14, 13, 12,  8,  7,  2,  3,  3],
        [ 2,  1,  1,  2,  3,  4,  5,  6,  7,  7,  8,  9, 10, 11, 12, 12, 13, 14,
         15, 14, 13,  9,  8,  3,  4,  4],
        [ 2,  1,  2,  1,  1,  2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 10, 11, 12,
         13, 12, 11,  7,  6,  1,  2,  2],
        [ 3,  2,  3,  1,  1,  1,  2,  3,  4,  4,  5,  6,  7,  8,  9,  9, 10, 11,
         12, 11, 10,  6,  5,  2,  3,  3],
        [ 4,  3,  4,  2,  1,  1,  1,  2,  3,  3,  4,  5,  6,  7,  8,  8,  9, 10,
         11, 10,  9,  5,  4,  3,  4,  4],
        [ 5,  4,  5,  3,  2,  1,  1,  1,  2,  2,  3,  4,  5,  6,  7,  7,  8,  9,
         10,  9,  8,  4,  3,  4,  5,  5],
        [ 6,  5,  6,  4,  3,  2,  1,  1,  1,  1,  2,  3,  4,  5,  6,  6,  7,  8,
          9,  8,  7,  3,  2,  5,  6,  6],
        [ 7,  6,  7,  5,  4,  3,  2,  1,  1,  2,  3,  4,  5,  6,  7,  7,  8,  9,
         10,  9,  8,  4,  3,  6,  7,  7],
        [ 7,  6,  7,  5,  4,  3,  2,  1,  2,  1,  1,  2,  3,  4,  5,  5,  6,  7,
          8,  7,  6,  2,  1,  6,  7,  7],
        [ 8,  7,  8,  6,  5,  4,  3,  2,  3,  1,  1,  1,  2,  3,  4,  4,  5,  6,
          7,  6,  5,  3,  2,  7,  8,  8],
        [ 9,  8,  9,  7,  6,  5,  4,  3,  4,  2,  1,  1,  1,  2,  3,  3,  4,  5,
          6,  5,  4,  2,  3,  8,  9,  9],
        [10,  9, 10,  8,  7,  6,  5,  4,  5,  3,  2,  1,  1,  1,  2,  2,  3,  4,
          5,  4,  3,  1,  2,  9, 10, 10],
        [11, 10, 11,  9,  8,  7,  6,  5,  6,  4,  3,  2,  1,  1,  1,  1,  2,  3,
          4,  3,  2,  2,  3, 10, 11, 11],
        [12, 11, 12, 10,  9,  8,  7,  6,  7,  5,  4,  3,  2,  1,  1,  2,  3,  4,
          5,  4,  3,  3,  4, 11, 12, 12],
        [12, 11, 12, 10,  9,  8,  7,  6,  7,  5,  4,  3,  2,  1,  2,  1,  1,  2,
          3,  2,  1,  3,  4, 11, 12, 12],
        [13, 12, 13, 11, 10,  9,  8,  7,  8,  6,  5,  4,  3,  2,  3,  1,  1,  1,
          2,  3,  2,  4,  5, 12, 13, 13],
        [14, 13, 14, 12, 11, 10,  9,  8,  9,  7,  6,  5,  4,  3,  4,  2,  1,  1,
          1,  2,  3,  5,  6, 13, 14, 14],
        [15, 14, 15, 13, 12, 11, 10,  9, 10,  8,  7,  6,  5,  4,  5,  3,  2,  1,
          1,  1,  2,  6,  7, 14, 15, 15],
        [14, 13, 14, 12, 11, 10,  9,  8,  9,  7,  6,  5,  4,  3,  4,  2,  3,  2,
          1,  1,  1,  5,  6, 13, 14, 14],
        [13, 12, 13, 11, 10,  9,  8,  7,  8,  6,  5,  4,  3,  2,  3,  1,  2,  3,
          2,  1,  1,  4,  5, 12, 13, 13],
        [ 9,  8,  9,  7,  6,  5,  4,  3,  4,  2,  3,  2,  1,  2,  3,  3,  4,  5,
          6,  5,  4,  1,  1,  8,  9,  9],
        [ 8,  7,  8,  6,  5,  4,  3,  2,  3,  1,  2,  3,  2,  3,  4,  4,  5,  6,
          7,  6,  5,  1,  1,  7,  8,  8],
        [ 3,  2,  3,  1,  2,  3,  4,  5,  6,  6,  7,  8,  9, 10, 11, 11, 12, 13,
         14, 13, 12,  8,  7,  1,  1,  1],
        [ 4,  3,  4,  2,  3,  4,  5,  6,  7,  7,  8,  9, 10, 11, 12, 12, 13, 14,
         15, 14, 13,  9,  8,  1,  1,  1],
        [ 4,  3,  4,  2,  3,  4,  5,  6,  7,  7,  8,  9, 10, 11, 12, 12, 13, 14,
         15, 14, 13,  9,  8,  1,  1,  1]])
    
    x3 = torch.tensor([0, 2, 0, 0, 0, 0, 0, 6, 0, 0, 0, 1, 2, 0, 0, 0])
    A3 = torch.tensor([[ 1,  1,  2,  3,  4,  5,  6,  7,  5,  4,  2,  3,  3,  4,  5,  5],
        [ 1,  1,  1,  2,  3,  4,  5,  6,  4,  3,  1,  2,  2,  3,  4,  4],
        [ 2,  1,  1,  1,  2,  3,  4,  5,  3,  2,  2,  3,  3,  4,  5,  5],
        [ 3,  2,  1,  1,  1,  2,  3,  4,  2,  1,  3,  4,  4,  5,  6,  6],
        [ 4,  3,  2,  1,  1,  1,  2,  3,  3,  2,  4,  5,  5,  6,  7,  7],
        [ 5,  4,  3,  2,  1,  1,  1,  2,  2,  3,  5,  6,  6,  7,  8,  8],
        [ 6,  5,  4,  3,  2,  1,  1,  1,  1,  2,  6,  7,  7,  8,  9,  9],
        [ 7,  6,  5,  4,  3,  2,  1,  1,  2,  3,  7,  8,  8,  9, 10, 10],
        [ 5,  4,  3,  2,  3,  2,  1,  2,  1,  1,  5,  6,  6,  7,  8,  8],
        [ 4,  3,  2,  1,  2,  3,  2,  3,  1,  1,  4,  5,  5,  6,  7,  7],
        [ 2,  1,  2,  3,  4,  5,  6,  7,  5,  4,  1,  1,  1,  2,  3,  3],
        [ 3,  2,  3,  4,  5,  6,  7,  8,  6,  5,  1,  1,  2,  3,  4,  4],
        [ 3,  2,  3,  4,  5,  6,  7,  8,  6,  5,  1,  2,  1,  1,  2,  2],
        [ 4,  3,  4,  5,  6,  7,  8,  9,  7,  6,  2,  3,  1,  1,  1,  1],
        [ 5,  4,  5,  6,  7,  8,  9, 10,  8,  7,  3,  4,  2,  1,  1,  1],
        [ 5,  4,  5,  6,  7,  8,  9, 10,  8,  7,  3,  4,  2,  1,  1,  1]])
    
    return (x1,x2,x3), (A1,A2,A3)

main()